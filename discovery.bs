<pre class="metadata">
Title: QualityLink Data Source Discovery Specification
!Project Reference: Task 3.6 (Creation of a Technical Trusted List Standard)
Shortname: quality-link-discovery
Status: LS
Level: 0
Warning: Not Ready
Editor: Colin Tück, Knowledge Innovation Centre; KIC, colin@knowledgeinnovation.eu, https://knowledgeinnovation.eu
Local Boilerplate: defaults yes
Local Boilerplate: header yes
Abstract: This specification describes how the QualityLink aggregator discovers data sources exposed by higher education institutions and other data providers.
</pre>

Introduction {#intro}
============

<div class="informative">

Status of This Document {#status}
-----------------------

This document is a draft specification, developed by KIC and EUF within the [QualityLink](https://quality-link.eu/) project. It is currently being discussed with the QualityLink Standards Consultation Board.

Goals and Rationale {#rationale}
-------------------

The QualityLink project aims to develop a scalable architecture that allows higher education institutions and others to publish data on their learning opportunities in different interoperable formats easily. This specification describes how data sources can be exposed by higher education institutions and other data providers, and how they can be discovered by aggregators.

Audience {#audience}
--------

This specification is intended for use by higher education institutions and other data providers that would like their data to be available for aggregation.

Secondly, it targets data aggregators. The QualityLink project will implement a data aggregator to test and demonstrate this specification in practice.

Changes {#changes}
-------

n/a

</div>

Key Concepts {#concepts}
============

The following key concepts and terminology are used throughout the document, as well as other QualityLink specifications:

<pre class=include>
path: concepts.include
</pre>

User Stories {#user-stories}
============

The following usage scenarios illustrate ways in which this specification might be used or desired features it should enable:

Expose data {#uc-1}
-----------

As a [HEI] or [=education provider=] I want to advertise my data source to a Europe-wide [=aggregator=] in a secure way, but without the need for additional action or manual intervention by another organisation.

Manage data sources {#uc-2}
-------------------

As manager of an [=aggregator=] (e.g. the QualityLink consortium) I want to manage trusted sources of [=data providers=] whose data should be integrated in the QualityLink platform.

Access statistics {#uc-3}
-----------------

As a [=data provider=] I want to access a dashboard or similar to manage my data sources and get insights/stats on how my data was harvested and processed.

Requirements {#requirements}
============

- The approach should be as flexible and as easy to adopt as possible for HEIs and other data providers.

- The approach should be scalable. Hence, data sources of HEIs need to be discovered automatically and without manual registration or intervention, in line with the policies defined above. (Authoritative sources and other data sources are managed manually, as each case will need to be screened against the applicable policies.)

- Discovery of data from education providers/HEIs should be based on data from the EWP Registry, the EUF HEI API and DEQAR (which includes all HEIs listed in ETER and OrgReg).

Manifest File {#manifest}
=============

The location of one or several data files or API endpoints (see [Data Exchange](data_exchange.html) spec) is indicated in a simple, standardised “manifest” file published by the [=data provider=].

For authoritative sources and other data sources, the location of the manifest file is managed manually. For [HEIS] the location of the manifest file is auto-discovered as described in the following chapter.

The manifest file can be expressed as [[!JSON]] or [[!YAML]] file. The file must be a single object/mapping with at least a top-level key named `sources`. An additional `meta` key can be provided.

Data sources {#manifest-sources}
------------

`sources` must be an array/sequence of objects/mapping, each representing a data source of the provider. At least one data source must be specified. The following keys are supported for each source:

<pre class=simpledef>
type: Type of the data source: string, using the identifier specified in [[!QL-EXCH]]
path: File or API root: URL
version: Version identifier: string (see data source tyope-specific information)
id: Identifier of the data source: string
name: Human-readable name or description: string
auth: Authorisation: object/mapping including `type` and additional, access control strategy-specific parameters
</pre>

Keys marked with an asterisk are required. Additional, data source type-specific keys are specified in [[!QL-EXCH]].

Additional metadata {#manifest-meta}
-------------------

The `meta` key is optional and may be used to specify institutional identifiers. [=Aggregators=] may use this for diagnostic purposes or identify changed identifiers.

<pre class=simpledef>
schac: SCHAC code of the institution covered by the data source(s)
eterid: ETER identifier, as used in the EHESO and OrgReg
deqarid: DEQAR institutional identifier
did: Decentralised Identifier (DID) used by the institution
</pre>

JSON Schema {#manifest-schema}
-----------

```json
{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://data.quality-link.eu/schema/manifest-v1.json",
  "title": "QualityLink manifest file",
  "description": "A manifest file listing data sources on learning opportunities.",
  "type": "object",
  "properties": {
    "sources": {
      "description": "Defines one or more data sources",
      "type": "array",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Type of the data source: string, using the identifier specified in QualityLink Data Exchange Specification",
            "type": "string",
            "enum": [
              "elm",
              "ooapi",
              "edu-api"
            ]
          },
          "path": {
            "description": "File or API root",
            "type": "string",
            "format": "uri",
            "pattern": "^https?://"
          },
          "version": {
            "description": "Version identifier (see data source tyope-specific information)",
            "type": "string"
          },
          "id": {
            "description": "Identifier of the data source",
            "type": "string"
          },
          "name": {
            "description": "Human-readable name or description",
            "type": "string"
          },
          "auth": {
            "description": "Authorisation parameters",
            "type": "object",
            "properties": {
              "type": {
                "description": "Access control strategy required for this data source",
                "type": "string",
                "enum": [
                  "none",
                  "httpsig",
                  "httpheader",
                  "oauth2.0"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        },
        "required": [
          "type",
          "path"
        ]
      }
    },
    "meta": {
      "description": "Defines metadata about the institution providing the manifest file.",
      "type": "object",
      "properties": {
        "schac": {
          "description": "SCHAC code of the institution covered by the data source(s)",
          "type": "string"
        },
        "eterid": {
          "description": "ETER identifier, as used in the EHESO and OrgReg",
          "type": "string"
        },
        "deqarid": {
          "description": "DEQAR institutional identifier",
          "type": "string"
        },
        "did": {
          "description": "Decentralised Identifier (DID) used by the institution",
          "type": "string"
        }
      }
    }
  },
  "required": [
    "sources"
  ]
}
```

Discovery Mechanism {#discovery}
===================

The specification offers two options how to auto-discover a manifest file.

[HEIS] may use either option. [=Aggregators=] must support both options.

DNS TXT Record {#discovery-dns}
--------------

The [HEI] can create a DNS TXT record of the following format:

```
v=qldiscover1; m=[URL]
```

The URL must point to a manifest file.

Well-known URL {#discovery-well-known}
--------------

The [HEI] can place a manifest file at a URL of the form:

- `[DOMAIN]/.well-known/quality-link-manifest`
- `[DOMAIN]/.well-known/quality-link-manifest.json`
- `[DOMAIN]/.well-known/quality-link-manifest.yaml`

These locations are tried in this order and the first file found is used.

Domain Search Order {#discovery-domains}
-------------------

An [=aggregator=] should consider a combined list of [HEIS] appearing in one or more of the following datasets:

- EUF HEI API
- EWP Registry
- eduGAIN (?)
- DEQAR (including institutions from OrgReg and ETER)

For each [HEI], the [=aggregator=] attempts to fetch a manifest file from a known domain in this order:

1. domain/host name that is the [HEI]'s SCHAC code (if available)
1. host name of the [HEI]'s website (as indicated in OrgReg or DEQAR)
1. website host name stripped off `www` or similar generic first component
1. highest level registrable domain name determined from the website host name (i.e. public suffix \+ one further DNS component)

For each domain, both of the above mechanisms are tried.

Once a manifest file has successfully been obtained, no further domains or mechanisms are tried.

Security Considerations {#security}
=======================

The location and content of manifest files are not sensitive information. Access to data sources themselves can be protected as described in [[!QL-EXCH]].

Examples {#examples}
========

<div class="informative">

Manifest file {#examples-manifest}
-------------

```json
{
    "meta": {
        "schac": "example.ac.at",
        "eterid": "AT4711",
        "deqarid": "DEQARINST0815"
    },
    "sources": [
        {
            "type": "elm",
            "path": "https://data.example.org/feed/elm.ttl",
            "version": "3.2",
            "auth": {
                "type": "none"
            }
        },
        {
            "type": "ooapi",
            "path": "https://data.example.org/ooapi/v5/",
            "version": "5",
            "auth": {
                "type": "httpheader"
            },
            "id": "eua-courses-virt",
            "name": "Courses offered on the Alliance's virtual campus"
        },
        {
            "type": "edu-api",
            "path": "https://edu-api.example.org/",
            "version": "1.0",
            "auth": {
                "type": "oauth2.0",
                "token_endpoint": "https://auth.example.org/oauth2/get_token"
            },
            "name": "Experimental data source using Edu-API"
        }
    ]
}
```

```yaml
meta:
  schac: example.ac.at
  eterid: AT4711
  deqarid: DEQARINST0815
sources:
  - type: elm
    path: https://data.example.org/feed/elm.ttl
    version: "3.2"
    auth:
      type: none
  - type: ooapi
    path: https://data.example.org/ooapi/v5/
    version: "5"
    auth:
      type: httpheader
    id: eua-courses-virt
    name: "Courses offered on the Alliance's virtual campus"
  - type: edu-api
    path: https://edu-api.example.org/
    version: "1.0"
    auth:
      type: oauth2.0
      token_endpoint: https://auth.example.org/oauth2/get_token
    name: "Experimental data source using Edu-API"
```

</div>

